{"ast":null,"code":"var _jsxFileName = \"/Users/tranhongphuoc/exercise-1/src/Ex7/AreAllTeenagers.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst people = [{\n  name: \"hung\",\n  age: 12,\n  occupation: \"saler\"\n}, {\n  name: \"toan\",\n  age: 24,\n  occupation: \"manager\"\n}, {\n  name: \"khang\",\n  age: 30,\n  occupation: \"staff\"\n}, {\n  name: \"phat\",\n  age: 18,\n  occupation: \"docter\"\n}];\nfunction sortByOccupationAndAge(people) {\n  return people.sort((a, b) => {\n    //sort by occupation alphabetically\n    const occupationComparison = a.occupation.localeCompare(b.occupation);\n    if (occupationComparison !== 0) {\n      require(\"module\");\n    }\n  });\n}\nfunction AreAllTeenager() {\n  const sortedPeople = sortByOccupationAndAge(people);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n      children: \"----------------------------------------------Exercise 7---------------------\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: [\"Check if all are teenager? Result\", \" \", people.find(people => people.age <= 10 || people.age >= 20) === \"undefined\" ? \"True\" : \"False\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n      children: \"----------------------------------------------Exercise 8---------------------\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Sort by occupation and age: \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n      children: JSON.stringify(sortedPeople, null, 2)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 5\n  }, this);\n}\n_c = AreAllTeenager;\nexport default AreAllTeenager;\nvar _c;\n$RefreshReg$(_c, \"AreAllTeenager\");","map":{"version":3,"names":["people","name","age","occupation","sortByOccupationAndAge","sort","a","b","occupationComparison","localeCompare","require","AreAllTeenager","sortedPeople","_jsxDEV","children","fileName","_jsxFileName","lineNumber","columnNumber","find","JSON","stringify","_c","$RefreshReg$"],"sources":["/Users/tranhongphuoc/exercise-1/src/Ex7/AreAllTeenagers.js"],"sourcesContent":["const people = [\n  { name: \"hung\", age: 12, occupation: \"saler\" },\n  { name: \"toan\", age: 24, occupation: \"manager\" },\n  { name: \"khang\", age: 30, occupation: \"staff\" },\n  { name: \"phat\", age: 18, occupation: \"docter\" },\n];\n\nfunction sortByOccupationAndAge(people) {\n  return people.sort((a, b) => {\n    //sort by occupation alphabetically\n    const occupationComparison = a.occupation.localeCompare(b.occupation);\n    if (occupationComparison !== 0) {\n      require(\"module\");\n    }\n  });\n}\n\nfunction AreAllTeenager() {\n  const sortedPeople = sortByOccupationAndAge(people);\n  return (\n    <div>\n      <h4>\n        ----------------------------------------------Exercise\n        7---------------------\n      </h4>\n      <h3>\n        Check if all are teenager? Result{\" \"}\n        {people.find((people) => people.age <= 10 || people.age >= 20) ===\n        \"undefined\"\n          ? \"True\"\n          : \"False\"}\n      </h3>\n      <h4>\n        ----------------------------------------------Exercise\n        8---------------------\n      </h4>\n      <h3>Sort by occupation and age: </h3>\n      <pre>{JSON.stringify(sortedPeople, null, 2)}</pre>\n      {/*\n            sortedPeople: The array of objects (e.g., the sorted people array) to convert to a string.\n            null: This is the \"replacer\" parameter, which can be used to filter or transform values. Here, itâ€™s null, meaning no transformation is applied (all values are included as-is).\n            2: This is the \"space\" parameter, which controls indentation for readability. A value of 2 means the JSON string will be formatted with 2 spaces for each level of indentation, making it easier to read.\n            */}\n    </div>\n  );\n}\n\nexport default AreAllTeenager;\n"],"mappings":";;AAAA,MAAMA,MAAM,GAAG,CACb;EAAEC,IAAI,EAAE,MAAM;EAAEC,GAAG,EAAE,EAAE;EAAEC,UAAU,EAAE;AAAQ,CAAC,EAC9C;EAAEF,IAAI,EAAE,MAAM;EAAEC,GAAG,EAAE,EAAE;EAAEC,UAAU,EAAE;AAAU,CAAC,EAChD;EAAEF,IAAI,EAAE,OAAO;EAAEC,GAAG,EAAE,EAAE;EAAEC,UAAU,EAAE;AAAQ,CAAC,EAC/C;EAAEF,IAAI,EAAE,MAAM;EAAEC,GAAG,EAAE,EAAE;EAAEC,UAAU,EAAE;AAAS,CAAC,CAChD;AAED,SAASC,sBAAsBA,CAACJ,MAAM,EAAE;EACtC,OAAOA,MAAM,CAACK,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAK;IAC3B;IACA,MAAMC,oBAAoB,GAAGF,CAAC,CAACH,UAAU,CAACM,aAAa,CAACF,CAAC,CAACJ,UAAU,CAAC;IACrE,IAAIK,oBAAoB,KAAK,CAAC,EAAE;MAC9BE,OAAO,CAAC,QAAQ,CAAC;IACnB;EACF,CAAC,CAAC;AACJ;AAEA,SAASC,cAAcA,CAAA,EAAG;EACxB,MAAMC,YAAY,GAAGR,sBAAsB,CAACJ,MAAM,CAAC;EACnD,oBACEa,OAAA;IAAAC,QAAA,gBACED,OAAA;MAAAC,QAAA,EAAI;IAGJ;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACLL,OAAA;MAAAC,QAAA,GAAI,mCAC+B,EAAC,GAAG,EACpCd,MAAM,CAACmB,IAAI,CAAEnB,MAAM,IAAKA,MAAM,CAACE,GAAG,IAAI,EAAE,IAAIF,MAAM,CAACE,GAAG,IAAI,EAAE,CAAC,KAC9D,WAAW,GACP,MAAM,GACN,OAAO;IAAA;MAAAa,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACT,CAAC,eACLL,OAAA;MAAAC,QAAA,EAAI;IAGJ;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACLL,OAAA;MAAAC,QAAA,EAAI;IAA4B;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACrCL,OAAA;MAAAC,QAAA,EAAMM,IAAI,CAACC,SAAS,CAACT,YAAY,EAAE,IAAI,EAAE,CAAC;IAAC;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAM/C,CAAC;AAEV;AAACI,EAAA,GA5BQX,cAAc;AA8BvB,eAAeA,cAAc;AAAC,IAAAW,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}